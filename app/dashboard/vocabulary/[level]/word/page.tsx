// "use client";
// import { useEffect, useState } from "react";
// import { usePathname } from "next/navigation";
// import WordLayout from "../components/WordLayout";
// import customFetch from "@/util/custom-fetch";

// interface Word {
//   word_id: number;
//   word: string;
//   word_furigana: string;
//   word_meaning: string;
//   word_level: string;
// }

// export default function WordPage() {
//   const [uuid, setUuid] = useState(""); 
//   const pathname = usePathname();
//   const pathSegments = pathname.split("/");
//   const levelRaw = pathSegments[pathSegments.length - 2];
//   const [words, setWords] = useState<Word[]>([]);
//   const level = decodeURIComponent(levelRaw).replace("JLPT ", "").trim();

//   // ‚úÖ Îã®Ïñ¥ Î∂àÎü¨Ïò§Í∏∞ + ÎûúÎç§ ÏÖîÌîå
//   const fetchWords = async () => {
//     try {
//       const response = await customFetch("/words",{method:"GET"});
//       const data: Word[] = await response.json();

//       if (level) {
//         const filteredWords = data.filter(
//           (word) => word.word_level.trim().toUpperCase() === level.toUpperCase()
//         );
//         setWords(shuffleArray(filteredWords));
//       }
//     } catch (error) {
//       console.error("Ïò§Î•ò Î∞úÏÉù:", error);
//     }
//   };

//   useEffect(() => {
//     fetchWords();
//   }, [level]);

//   useEffect(()=> {
//     const storedUuid = localStorage.getItem("uuid");
//     if (storedUuid) setUuid(storedUuid);
//   }, []);

//   const saveShuffledWords = async (shuffledIds: number[]) => {
//     if (!uuid) return;

//     await customFetch("/user-words", {
//       method: "POST",
//       body: JSON.stringify({ uuid, shuffled_word_ids: shuffledIds })
//     })
//   };

//   const restartLearning = () => {
//     const newShuffled = shuffleArray([...words]);
//     setWords(newShuffled);
//     saveShuffledWords(newShuffled.map(w => w.word_id));
//   };

//   const shuffleArray = (array: Word[]) => {
//     return array.sort(() => Math.random() - 0.5);
//   };

//   // // ‚úÖ "Îã§Ïãú ÌïôÏäµ" Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏÉàÎ°ú ÏÖîÌîå
//   // const restartLearning = () => {
//   //   setWords(shuffleArray([...words])); // üîπ Í∏∞Ï°¥ Îã®Ïñ¥Î•º Îã§Ïãú ÏÑûÏùå
//   // };

//   return <WordLayout words={words} onRestart={restartLearning} />;
// }

"use client";
import { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import WordLayout from "../components/WordLayout";
import customFetch from "@/util/custom-fetch";

interface Word {
  word_id: number;
  word: string;
  word_furigana: string;
  word_meaning: string;
  word_level: string;
}

export default function WordPage() {
  const pathname = usePathname();
  const pathSegments = pathname.split("/");
  const levelRaw = pathSegments[pathSegments.length - 2];
  const [words, setWords] = useState<Word[]>([]);
  const [uuid, setUuid] = useState<string>(""); // UUID ÏÉÅÌÉú Ï∂îÍ∞Ä
  const level = decodeURIComponent(levelRaw).replace("JLPT ", "").trim();

  // UUID Í∞ÄÏ†∏Ïò§Í∏∞ (Ïòà: Î°úÍ∑∏Ïù∏ ÏãúÏä§ÌÖú)
  useEffect(() => {
    const storedUuid = localStorage.getItem("uuid") || "temp-uuid";
    setUuid(storedUuid);
    console.log(storedUuid + 'Î∞òÍ∞ëuuid')
  }, []);

  // ÏÖîÌîåÎêú Îã®Ïñ¥ ID Ï†ÄÏû• API Ìò∏Ï∂ú
  const saveShuffledWords = async (shuffledIds: number[]) => {
    try {
      await customFetch("/user-words", {
        method: "POST",
        body: JSON.stringify({ uuid, shuffled_word_ids: shuffledIds })
      });
    } catch (error) {
      console.error("ÏÖîÌîå Ï†ÄÏû• Ïã§Ìå®:", error);
    }
  };

  // ‚úÖ Îã®Ïñ¥ Î∂àÎü¨Ïò§Í∏∞ + Ï†ÄÏû•Îêú ÏÖîÌîå ÌôïÏù∏
  const fetchWords = async () => {
    try {
      // 1. ÏõêÎ≥∏ Îã®Ïñ¥ Î∂àÎü¨Ïò§Í∏∞
      const response = await customFetch("/words", { method: "GET" });
      const data: Word[] = await response.json();

      // 2. Î†àÎ≤® ÌïÑÌÑ∞ÎßÅ
      const filteredWords = level 
        ? data.filter(w => w.word_level.trim().toUpperCase() === level.toUpperCase())
        : data;

      console.log('filteredWords:', filteredWords);  

      // 3. Ï†ÄÏû•Îêú ÏÖîÌîå ÌôïÏù∏
      const savedResponse = await customFetch(`/user-words?uuid=${uuid}`);
      if (savedResponse.status === 204) {
      // 204 No Content
      return { shuffled_word_ids: [] };
      }
      const savedData = await savedResponse.json();

      console.log('savedData:', savedData);
      
      if (savedData?.shuffled_word_ids && savedData.shuffled_word_ids.length > 0) {
        // Ï†ÄÏû•Îêú ÏàúÏÑúÎåÄÎ°ú Ïû¨Ï†ïÎ†¨
        const orderedWords = savedData.shuffled_word_ids
          .map((id: number) => filteredWords.find(w => w.word_id === id))
          .filter(Boolean) as Word[];
        setWords(orderedWords);
      } else {
        // ÏÉàÎ°ú ÏÖîÌîå ÌõÑ Ï†ÄÏû•
        const shuffled = shuffleArray(filteredWords);
        setWords(shuffled);
        saveShuffledWords(shuffled.map(w => w.word_id));
      }
    } catch (error) {
      console.error("Îã®Ïñ¥ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
    }
  };

  // ‚úÖ "Îã§Ïãú ÌïôÏäµ" Î≤ÑÌäº Ìï∏Îì§Îü¨
  const restartLearning = () => {
    const newShuffled = shuffleArray([...words]);
    setWords(newShuffled);
    saveShuffledWords(newShuffled.map(w => w.word_id));
  };

  // ÏÖîÌîå Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
  const shuffleArray = (array: Word[]) => {
    return [...array].sort(() => Math.random() - 0.5);
  };

  useEffect(() => {
    if (uuid) fetchWords();
  }, [level, uuid]);

  return <WordLayout uuid={uuid} words={words} onRestart={restartLearning} />;
}

